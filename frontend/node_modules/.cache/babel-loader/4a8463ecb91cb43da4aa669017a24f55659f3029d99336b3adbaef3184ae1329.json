{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor\napi.interceptors.response.use(response => response, error => {\n  if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout - server is not responding');\n  }\n  throw error;\n});\nexport const sendMessage = async messageData => {\n  try {\n    const response = await api.post('/api/contact', messageData);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      // Server responded with error status\n      throw new Error(error.response.data.error || 'Server error');\n    } else if (error.request) {\n      // No response received\n      throw new Error('Cannot connect to server. Is it running?');\n    } else {\n      // Other errors\n      throw new Error('Request failed: ' + error.message);\n    }\n  }\n};\n\n// Test connection function\nexport const testConnection = async () => {\n  return api.get('/api/health');\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","headers","interceptors","response","use","error","code","Error","sendMessage","messageData","post","data","request","message","testConnection","get"],"sources":["/Users/sumukesh/Documents/portfolio-react/portfolio/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001',\n  timeout: 10000, \n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n// Add response interceptor\napi.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timeout - server is not responding');\n    }\n    throw error;\n  }\n);\n\nexport const sendMessage = async (messageData) => {\n  try {\n    const response = await api.post('/api/contact', messageData);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      // Server responded with error status\n      throw new Error(error.response.data.error || 'Server error');\n    } else if (error.request) {\n      // No response received\n      throw new Error('Cannot connect to server. Is it running?');\n    } else {\n      // Other errors\n      throw new Error('Request failed: ' + error.message);\n    }\n  }\n};\n\n// Test connection function\nexport const testConnection = async () => {\n  return api.get('/api/health');\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;EACtEC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC3BD,QAAQ,IAAIA,QAAQ,EACpBE,KAAK,IAAI;EACP,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,MAAMF,KAAK;AACb,CACF,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAOC,WAAW,IAAK;EAChD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMT,GAAG,CAACgB,IAAI,CAAC,cAAc,EAAED,WAAW,CAAC;IAC5D,OAAON,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAON,KAAK,EAAE;IACd,IAAIA,KAAK,CAACF,QAAQ,EAAE;MAClB;MACA,MAAM,IAAII,KAAK,CAACF,KAAK,CAACF,QAAQ,CAACQ,IAAI,CAACN,KAAK,IAAI,cAAc,CAAC;IAC9D,CAAC,MAAM,IAAIA,KAAK,CAACO,OAAO,EAAE;MACxB;MACA,MAAM,IAAIL,KAAK,CAAC,0CAA0C,CAAC;IAC7D,CAAC,MAAM;MACL;MACA,MAAM,IAAIA,KAAK,CAAC,kBAAkB,GAAGF,KAAK,CAACQ,OAAO,CAAC;IACrD;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,OAAOpB,GAAG,CAACqB,GAAG,CAAC,aAAa,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}